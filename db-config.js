const { Pool } = require('pg');
require('dotenv').config();

// Configura√ß√£o otimizada do pool de conex√µes para NeonDB e Vercel
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false,
        sslmode: 'require'
    },
    // Configura√ß√µes otimizadas para Vercel
    max: 1, // Reduzir para Vercel (limite de conex√µes)
    min: 0, // N√£o manter conex√µes m√≠nimas
    idleTimeoutMillis: 3000, // Timeout reduzido para Vercel
    connectionTimeoutMillis: 10000, // Timeout de conex√£o reduzido
    // Configura√ß√µes espec√≠ficas para NeonDB
    application_name: 'helpdesk-app-vercel'
});

// Testar conex√£o
pool.on('connect', () => {
    console.log('‚úÖ Conectado ao PostgreSQL via NeonDB');
});

pool.on('error', (err) => {
    console.error('‚ùå Erro no pool de conex√µes PostgreSQL:', err);
    // N√£o encerrar o processo em caso de erro de conex√£o
});

// Fun√ß√£o para testar conex√£o com retry
async function testConnection(retries = 2) {
    console.log(`üîç Testando conex√£o com o banco de dados (${retries} tentativas)...`);
    
    for (let i = 0; i < retries; i++) {
        try {
            console.log(`üîå Tentativa ${i + 1}/${retries} de conex√£o...`);
            const client = await pool.connect();
            console.log('‚úÖ Teste de conex√£o bem-sucedido');
            client.release();
            return true;
        } catch (error) {
            console.error(`‚ùå Tentativa ${i + 1}/${retries} falhou:`, error.message);
            if (i < retries - 1) {
                const delay = 500 * (i + 1);
                console.log(`‚è≥ Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
                await new Promise(resolve => setTimeout(resolve, delay));
            } else {
                console.error(`üí• Todas as tentativas de conex√£o falharam`);
            }
        }
    }
    return false;
}

// Fun√ß√£o para executar query com retry
async function executeQuery(query, params = [], retries = 2) {
    for (let i = 0; i < retries; i++) {
        try {
            console.log(`üîç Executando query (tentativa ${i + 1}/${retries})`);
            const result = await pool.query(query, params);
            console.log(`‚úÖ Query executada com sucesso`);
            return result;
        } catch (error) {
            console.error(`‚ùå Query falhou (tentativa ${i + 1}/${retries}):`, error.message);
            if (i < retries - 1) {
                const delay = 500 * (i + 1);
                console.log(`‚è≥ Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
                await new Promise(resolve => setTimeout(resolve, delay));
            } else {
                console.error(`üí• Todas as tentativas falharam. √öltimo erro:`, error.message);
                throw error;
            }
        }
    }
}

// Fun√ß√£o para fechar pool de forma segura
async function closePool() {
    try {
        await pool.end();
        console.log('‚úÖ Pool de conex√µes fechado com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao fechar pool:', error);
    }
}

module.exports = { pool, testConnection, executeQuery, closePool };
